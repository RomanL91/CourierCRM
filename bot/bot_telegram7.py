import sys
import os
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django: —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ core/settings.py
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
sys.path.append(BASE_DIR)
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "core.settings")
django.setup()

import asyncio
import aiohttp
import json
import logging

import pika
import aio_pika
from asgiref.sync import sync_to_async, async_to_sync

from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from aiogram.client.bot import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app_orders.models import Order
from app_accounts.models import User, TelegramGroup

# ============================================================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# ============================================================
API_TOKEN = "8118146507:AAEPYUDWh9S-aX6XQtVHvnIVaQ8Rc2FSnUs"
# API_TOKEN = "7832235523:AAEMMP-wr4Z_90ivWitB_6Zbi5nbzc2Afrk"  # https://t.me/sckdev_bot
RABBIT_HOST = "185.100.67.246"
# RABBIT_HOST = "0.0.0.0"
RABBIT_PORT = 5672
RABBIT_USER = "guest"
RABBIT_PASSWORD = "guest"
RABBIT_QUEUE = "telegram_queue"
RABBIT_QUEUE_FEEDBACK = "feedback_queue"
DJANGO_HOST = "185.100.67.246"
# DJANGO_HOST = "0.0.0.0"
ENDPOINT_API_VIDEO = "http://185.100.67.246:8889/v1/api/upload_video/"

logging.basicConfig(level=logging.INFO)

storage = MemoryStorage()
dp = Dispatcher(storage=storage)
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
)


# ============================================================
# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —à–∞–≥–æ–≤, –Ω–æ –Ω–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è orderData)
# ============================================================
class DeliveryFeedbackStates(StatesGroup):
    begin_waiting_state = State()
    waiting_for_feedback_details = State()  # –µ—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ "–ù–µ –æ—Ç–ª–∏—á–Ω–æ"
    waiting_for_video = State()  # –¥–ª—è –≤–∏–¥–µ–æ –æ—Ç—á–µ—Ç–∞ (–æ–±—â–∏–π —à–∞–≥)


async def get_current_state(chat_id: int):
    state = FSMContext(dp.storage, key=f"{chat_id}:{chat_id}")
    current_state = await state.get_state()
    data = await state.get_data()

    # print(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    # print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")

    return current_state, data


# ============================================================
# –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
# ============================================================
async def download_video(file_id: str) -> bytes:
    # –ü–æ–ª—É—á–∞–µ–º file_path —á–µ—Ä–µ–∑ API Telegram
    file = await bot.get_file(file_id)
    file_path = file.file_path
    download_url = f"https://api.telegram.org/file/bot{API_TOKEN}/{file_path}"
    async with aiohttp.ClientSession() as session:
        async with session.get(download_url) as resp:
            if resp.status == 200:
                return await resp.read()
            else:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ: {resp.status}")


async def send_video_to_django(
    video_bytes: bytes, filename: str, order_code: str, courier_id: int
):
    data = aiohttp.FormData()
    data.add_field("video", video_bytes, filename=filename, content_type="video/mp4")
    data.add_field("order_code", order_code)
    data.add_field("courier_id", str(courier_id))
    async with aiohttp.ClientSession() as session:
        async with session.post(ENDPOINT_API_VIDEO, data=data) as resp:
            if resp.status == 200:
                logging.info("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ Django")
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –≤–∏–¥–µ–æ: {resp.status}")


# ============================================================
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ RabbitMQ
# ============================================================
def publish_feedback_to_rabbitmq(
    feedback_data: dict,
    queue_name: str = RABBIT_QUEUE_FEEDBACK,
    host: str = RABBIT_HOST,
    port: int = RABBIT_PORT,
    username: str = RABBIT_USER,
    password: str = RABBIT_PASSWORD,
):
    credentials = pika.PlainCredentials(username, password)
    connection_params = pika.ConnectionParameters(
        host=host, port=port, credentials=credentials
    )
    connection = pika.BlockingConnection(connection_params)
    channel = connection.channel()
    channel.queue_declare(queue=queue_name, durable=True)
    body_str = json.dumps(feedback_data, ensure_ascii=False)
    channel.basic_publish(
        exchange="",
        routing_key=queue_name,
        body=body_str,
        properties=pika.BasicProperties(delivery_mode=2),
    )
    connection.close()


# ============================================================
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–æ—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
# ============================================================
async def complete_feedback(message: Message, state: FSMContext):
    data = await state.get_data()
    order_code = data.get("orderCode", "–ù–µ —É–∫–∞–∑–∞–Ω")
    rating = data.get("rating", "–û—Ç–ª–∏—á–Ω–æ")
    comment = data.get("feedback_details", "") if rating == "–ù–µ –æ—Ç–ª–∏—á–Ω–æ" else ""
    courier_chat_id = message.from_user.id

    feedback_payload = {
        "orderCode": order_code,
        "rating": rating,
        "courierChatId": courier_chat_id,
        "comment": comment,
    }
    await sync_to_async(publish_feedback_to_rabbitmq)(feedback_payload)
    logging.info(f"Feedback –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {feedback_payload}")
    await state.clear()


# ============================================================
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
# ============================================================
async def send_feedback_keyboard(
    chat_id: int,
    order_data: dict,
    state: FSMContext,
):
    order_code = order_data.get("orderCode", "–ù–µ —É–∫–∞–∑–∞–Ω")
    client = order_data.get("customerName", "–ù–µ —É–∫–∞–∑–∞–Ω")
    client_phone = order_data.get("phone_number", "–ù–µ —É–∫–∞–∑–∞–Ω")
    client_adress = (
        order_data.get("delivery_info", {})
        .get("address", {})
        .get("formattedAddress", "–ù–µ —É–∫–∞–∑–∞–Ω")
    )
    client_entries = order_data.get("entries", [])
    data_entries = "\n".join(
        [
            f"{el['name']} - {el['totalPrice']} —Ç * {el['quantity']} –µ–¥.–∏–∑–º."
            for el in client_entries
        ]
    )

    msg = (
        f"–í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞–∫–∞–∑ üöö ‚Ññ {order_code}!\n\n"
        f"–ö–ª–∏–µ–Ω—Ç:\n {client}, üìû—Ç–µ–ª: {client_phone}!\n\n"
        f"–ê–¥—Ä–µ—Å:\n {client_adress}!\n\n"
        f"–ó–∞–∫–∞–∑:\n {data_entries}!\n\n"
        "‚ÑπÔ∏è–°–æ–æ–±—â–∏—Ç–µ –ò–Ω—Ñ–æ—Ä–º–∞–∏—é –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ü–æ–∫—É–ø–∞—Ç–µ–ª—è (–ò–ù–ü).\n"
        "‚ö†Ô∏è–û—Ü–µ–Ω–∏—Ç–µ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ü–æ–∫—É–ø–∞—Ç–µ–ª—è:"
    )
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–ª–∏—á–Ω–æ"), KeyboardButton(text="–ù–µ –æ—Ç–ª–∏—á–Ω–æ")]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await bot.send_message(chat_id, msg, reply_markup=keyboard)


# ============================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# ============================================================
async def set_group_handler(message: Message):
    group_chat_id = message.chat.id
    group_title = message.chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    parts = message.text.split(maxsplit=1)
    group_type = parts[1].strip() if len(parts) > 1 else ""
    await sync_to_async(TelegramGroup.objects.update_or_create)(
        chat_id=group_chat_id,
        defaults={"title": group_title, "group_type": group_type},
    )
    await message.answer(
        f'–ì—Ä—É–ø–ø–∞ "{group_title}" (—Ç–∏–ø: {group_type}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (chat_id={group_chat_id}).'
    )


# async def link_phone_handler(message: Message):
#     print("üìå link_phone_handler –≤—ã–∑–≤–∞–Ω!")
#     parts = message.text.split(maxsplit=1)
#     if len(parts) < 2:
#         await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n/link_phone <–Ω–æ–º–µ—Ä>")
#         return

#     phone_str = parts[1].strip()

#     try:
#         # ‚ö°Ô∏è –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
#         user_obj = await sync_to_async(User.objects.get, thread_sensitive=True)(
#             phone_number=phone_str
#         )
#     except User.DoesNotExist:
#         await message.answer(
#             f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {phone_str} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
#         )
#         return

#     # üìå –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º ChatID
#     user_obj.chat_id = message.from_user.id
#     await sync_to_async(user_obj.save, thread_sensitive=True)()

#     await message.answer(
#         f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {phone_str} –Ω–∞–π–¥–µ–Ω.\n"
#         f"üìå ChatID={message.from_user.id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!"
#     )


# async def any_text_handler(message: Message):
#     await message.answer(
#         "–Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /setgroup –∏–ª–∏ /link_phone."
#     )


# ============================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
# ============================================================
async def feedback_rating_handler(message: Message, state: FSMContext):
    current_state, data = await get_current_state(message.chat.id)
    order_code = data.get("orderCode", "–ù–µ —É–∫–∞–∑–∞–Ω")
    rating = message.text.strip()
    if rating not in ["–û—Ç–ª–∏—á–Ω–æ", "–ù–µ –æ—Ç–ª–∏—á–Ω–æ"]:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –û—Ç–ª–∏—á–Ω–æ –∏–ª–∏ –ù–µ –æ—Ç–ª–∏—á–Ω–æ."
        )
        return

    await message.answer(f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É –ò–ù–ü: {rating} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_code}.")
    logging.info(f"üìä User {message.from_user.id} –æ—Ü–µ–Ω–∏–ª: {rating} –¥–ª—è –∑–∞–∫–∞–∑–∞ ")

    await state.update_data(rating=rating)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(**data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    if rating == "–ù–µ –æ—Ç–ª–∏—á–Ω–æ":
        await state.set_state(DeliveryFeedbackStates.waiting_for_feedback_details)
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ —É—Å—Ç—Ä–æ–∏–ª–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –¥–æ—Å—Ç–∞–≤–∫–µ:"
        )
        # üìå –ü–æ–ª—É—á–∞–µ–º chat_id –≥—Ä—É–ø–ø—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        operator_groups = await sync_to_async(list)(TelegramGroup.objects.all())
        client_adress = (
            data.get("delivery_info", {})
            .get("address", {})
            .get("formattedAddress", "–ù–µ —É–∫–∞–∑–∞–Ω")
        )
        client_entries = data.get("entries", [])
        data_entries = "\n".join(
            [
                f"{el['name']} - {el['totalPrice']} —Ç * {el['quantity']} –µ–¥.–∏–∑–º."
                for el in client_entries
            ]
        )
        # order = await sync_to_async(Order.objects.filter)(chat_id=chat_id)
        order = await Order.objects.filter(order_code=order_code).afirst()
        for group in operator_groups:
            alert_msg = (
                f"‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è\n"
                f"–ö–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ–≤–æ–ª–µ–Ω –¥–æ—Å—Ç–∞–≤–∫–æ–π –∑–∞–∫–∞–∑–∞ {order_code}.\n"
                f"–ö—É—Ä—å–µ—Ä:\n{data.get('courierName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"–ê–¥—Ä–µ—Å:\n{client_adress}\n"
                f"–ó–∞–∫–∞–∑:\n{data_entries}\n"
                f"–ö–ª–∏–µ–Ω—Ç:\n{data.get('customerName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:\n{data.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                f"http://{DJANGO_HOST}/admin/app_orders/order/{order.pk}/change/"
            )
            await bot.send_message(group.chat_id, alert_msg)
    else:
        await state.set_state(DeliveryFeedbackStates.waiting_for_video)
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –æ—Ç—á–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞."
        )


async def feedback_details_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != DeliveryFeedbackStates.waiting_for_feedback_details:
        return
    details = message.text.strip()
    if not details:
        await message.answer(
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ —É—Å—Ç—Ä–æ–∏–ª–æ."
        )
        return
    await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤: {details}.")
    logging.info(f"User {message.from_user.id} –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤: {details}")
    await state.update_data(feedback_details=details)
    await state.set_state(DeliveryFeedbackStates.waiting_for_video)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –æ—Ç—á–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞."
    )


async def video_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    # print(f"---- state video_handler ---- >>> {await state.get_data()}")
    if current_state != DeliveryFeedbackStates.waiting_for_video:
        return
    if message.video:
        video_file_id = message.video.file_id
        await message.answer(f"–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ! (File ID: {video_file_id})")
        logging.info(f"User {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ: {video_file_id}")
        try:
            video_bytes = await download_video(video_file_id)
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            order_code = data.get("orderCode", "–ù–µ —É–∫–∞–∑–∞–Ω")
            # –ï—Å–ª–∏ courier_id –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å message.from_user.id, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç
            courier_id = data.get("courier_id") or message.from_user.id
            await send_video_to_django(
                video_bytes, f"{video_file_id}.mp4", order_code, courier_id
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏/–ø–µ—Ä–µ–¥–∞—á–µ –≤–∏–¥–µ–æ: {e}")
    else:
        await message.answer("–í–∏–¥–µ–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –æ—Ç–∑—ã–≤ –ø—Ä–∏–Ω—è—Ç.")
    await complete_feedback(message, state)


async def skip_video_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state not in [
        DeliveryFeedbackStates.waiting_for_video,
        DeliveryFeedbackStates.waiting_for_feedback_details,
    ]:
        return
    await message.answer("–í–∏–¥–µ–æ –æ—Ç—á–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω. –°–ø–∞—Å–∏–±–æ!")
    logging.info(f"User {message.from_user.id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤–∏–¥–µ–æ –æ—Ç—á–µ—Ç.")
    await complete_feedback(message, state)


# ============================================================
# RabbitMQ Consumer
# ============================================================
async def rabbit_consumer():
    connection = await aio_pika.connect_robust(
        host=RABBIT_HOST, port=RABBIT_PORT, login=RABBIT_USER, password=RABBIT_PASSWORD
    )
    channel = await connection.channel()
    queue = await channel.declare_queue(RABBIT_QUEUE, durable=True)

    async with queue.iterator() as queue_iter:
        async for message in queue_iter:

            async with message.process():
                try:
                    body = message.body.decode("utf-8")
                    data = json.loads(body)
                    logging.info(f"–ü–æ–ª—É—á–∏–ª–∏ –∏–∑ RabbitMQ: {data}")

                    chat_id = data.get("chat_id")

                    # if not chat_id:
                    #     groups = await sync_to_async(list)(TelegramGroup.objects.all())
                    #     if not groups:
                    #         logging.warning("–ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
                    #         continue
                    #     for group in groups:
                    #         await send_feedback_keyboard(
                    #             group.chat_id,
                    #             data,
                    #             state,  # FSMContext(dp.storage, f"{chat_id}:{chat_id}"),
                    #         )
                    #         await state.set_state(DeliveryFeedbackStates.waiting_state)
                    #         logging.info(
                    #             f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group.title} (chat_id={group.chat_id})"
                    #         )
                    #     continue
                    state = FSMContext(dp.storage, key=f"{chat_id}:{chat_id}")
                    await state.update_data(**data)
                    await state.set_state(DeliveryFeedbackStates.begin_waiting_state)
                    await send_feedback_keyboard(
                        chat_id,
                        data,
                        state,  # FSMContext(dp.storage, f"{chat_id}:{chat_id}"),
                    )
                    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ chat_id={chat_id}")

                except Exception as e:
                    logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# ============================================================
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ============================================================


async def my_orders_handler(message: Message):
    chat_id = message.chat.id

    # # üìå –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # orders = await sync_to_async(Order.objects.filter)(chat_id=chat_id)

    # if not await sync_to_async(orders.exists)():
    #     await message.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
    #     return

    # # üìå –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    # orders_list = "\n".join(
    #     [f"üì¶ –ó–∞–∫–∞–∑ {order.orderCode}: {order.entries[0]['name']} ({order.deliveryAddress})" for order in await sync_to_async(list)(orders)]
    # )

    # await message.answer(f"üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n{orders_list}")
    await message.answer(f"üìã –≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")


async def help_handler(message: Message):
    help_text = (
        "‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "üì¶ <b>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</b> ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤.\n"
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b> ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ.\n"
        "/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.\n"
        # "/setgroup ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –≤ —Å–∏—Å—Ç–µ–º—É.\n"
        # "/link_phone [–Ω–æ–º–µ—Ä] ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. üì©"
    )
    await message.answer(help_text, parse_mode="HTML")


async def start_handler(message: Message):
    chat_id = message.chat.id
    first_name = message.from_user.first_name

    # üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    user = await sync_to_async(User.objects.filter)(chat_id=chat_id)
    if not await sync_to_async(user.exists)():
        # await sync_to_async(User.objects.create)(chat_id=chat_id, name=first_name)
        welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!\n\nüìå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    else:
        welcome_text = f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}!"

    # üìå –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º"
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True),
            ],
            [KeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
        ],
        resize_keyboard=True,
    )

    # üìå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        welcome_text,
        reply_markup=keyboard,
    )


async def contact_handler(message: Message):
    if not message.contact:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞."
        )
        return

    phone_number = message.contact.phone_number[1:]
    chat_id = message.from_user.id
    first_name = message.from_user.first_name

    # üìå –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ –Ω–æ–º–µ—Ä—É
    user = await sync_to_async(User.objects.filter)(phone_number=phone_number)

    if await sync_to_async(user.exists)():
        # üìå –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±–Ω–æ–≤–ª—è–µ–º chat_id
        user_obj = await sync_to_async(user.first)()
        user_obj.chat_id = chat_id
        await sync_to_async(user_obj.save)()
        await message.answer(
            f"‚úÖ –í–∞—à –Ω–æ–º–µ—Ä {phone_number} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–∏—Å—Ç–µ–º–µ!",
            reply_markup=ReplyKeyboardRemove(),
        )
    else:
        # # üìå –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        # await sync_to_async(User.objects.create)(
        #     chat_id=chat_id, phone_number=phone_number, name=first_name
        # )
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {phone_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=ReplyKeyboardRemove(),
        )


def register_handlers(dp: Dispatcher):
    # dp.message.register(link_phone_handler, Command(commands=["link_phone"]))
    dp.message.register(set_group_handler, Command(commands=["setgroup"]))
    dp.message.register(start_handler, Command("start"))  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
    dp.message.register(
        my_orders_handler, F.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"
    )  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"
    dp.message.register(help_handler, F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ü–æ–º–æ—â—å"
    dp.message.register(contact_handler, F.contact)
    dp.message.register(
        feedback_rating_handler, lambda m: m.text in ["–û—Ç–ª–∏—á–Ω–æ", "–ù–µ –æ—Ç–ª–∏—á–Ω–æ"]
    )
    dp.message.register(
        feedback_details_handler,
        lambda m: m.text
        and m.text.lower() not in ["/skip", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–æ—Ç–ª–∏—á–Ω–æ", "–Ω–µ –æ—Ç–ª–∏—á–Ω–æ"],
    )
    dp.message.register(video_handler, F.video)
    dp.message.register(
        skip_video_handler,
        lambda m: m.text
        and (m.text.lower().startswith("/skip") or "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" in m.text.lower()),
    )
    # dp.message.register(any_text_handler, F.text)


async def main():
    logging.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ rabbit_consumer...")
    register_handlers(dp)
    asyncio.create_task(rabbit_consumer())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
